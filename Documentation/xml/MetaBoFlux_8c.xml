<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="MetaBoFlux_8c" kind="file">
    <compoundname>MetaBoFlux.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">getopt.h</includes>
    <includes local="no">gsl/gsl_blas.h</includes>
    <includes local="no">gsl/gsl_multimin.h</includes>
    <includes local="no">gsl/gsl_math.h</includes>
    <includes local="no">gsl/gsl_rng.h</includes>
    <includes local="no">gsl/gsl_siman.h</includes>
    <includes local="no">gsl/gsl_ieee_utils.h</includes>
    <includes local="no">gsl/gsl_statistics_double.h</includes>
    <includes local="no">sbml/SBMLTypes.h</includes>
    <includes local="no">libxml/parser.h</includes>
    <includes local="no">libxml/xpath.h</includes>
    <includes local="yes">mpi.h</includes>
    <includes refid="especes_8h" local="yes">especes.h</includes>
    <includes refid="equations_8h" local="yes">equations.h</includes>
    <includes refid="simulation_8h" local="yes">simulation.h</includes>
    <includes refid="xml__parameter_8h" local="yes">xml_parameter.h</includes>
    <includes refid="data__parameters_8h" local="yes">data_parameters.h</includes>
    <includes refid="gsl__recuit_8h" local="yes">gsl_recuit.h</includes>
    <includes refid="gsl__mod_8h" local="yes">gsl_mod.h</includes>
    <includes refid="gsl__min_8h" local="yes">gsl_min.h</includes>
    <includes refid="gsl__sd_8h" local="yes">gsl_sd.h</includes>
    <includes refid="mpi__load_8h" local="yes">mpi_load.h</includes>
    <incdepgraph>
      <node id="497">
        <label>gsl/gsl_blas.h</label>
      </node>
      <node id="517">
        <label>mpi_load.h</label>
        <link refid="mpi__load_8h"/>
      </node>
      <node id="495">
        <label>assert.h</label>
      </node>
      <node id="502">
        <label>gsl/gsl_ieee_utils.h</label>
      </node>
      <node id="501">
        <label>gsl/gsl_siman.h</label>
      </node>
      <node id="490">
        <label>metaboflux/src/MetaBoFlux.c</label>
        <link refid="MetaBoFlux.c"/>
        <childnode refid="491" relation="include">
        </childnode>
        <childnode refid="492" relation="include">
        </childnode>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="494" relation="include">
        </childnode>
        <childnode refid="495" relation="include">
        </childnode>
        <childnode refid="496" relation="include">
        </childnode>
        <childnode refid="497" relation="include">
        </childnode>
        <childnode refid="498" relation="include">
        </childnode>
        <childnode refid="499" relation="include">
        </childnode>
        <childnode refid="500" relation="include">
        </childnode>
        <childnode refid="501" relation="include">
        </childnode>
        <childnode refid="502" relation="include">
        </childnode>
        <childnode refid="503" relation="include">
        </childnode>
        <childnode refid="504" relation="include">
        </childnode>
        <childnode refid="505" relation="include">
        </childnode>
        <childnode refid="506" relation="include">
        </childnode>
        <childnode refid="507" relation="include">
        </childnode>
        <childnode refid="508" relation="include">
        </childnode>
        <childnode refid="509" relation="include">
        </childnode>
        <childnode refid="510" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
        <childnode refid="513" relation="include">
        </childnode>
        <childnode refid="514" relation="include">
        </childnode>
        <childnode refid="515" relation="include">
        </childnode>
        <childnode refid="516" relation="include">
        </childnode>
        <childnode refid="517" relation="include">
        </childnode>
      </node>
      <node id="492">
        <label>stdlib.h</label>
      </node>
      <node id="505">
        <label>libxml/parser.h</label>
      </node>
      <node id="503">
        <label>gsl/gsl_statistics_double.h</label>
      </node>
      <node id="508">
        <label>especes.h</label>
        <link refid="especes_8h"/>
      </node>
      <node id="504">
        <label>sbml/SBMLTypes.h</label>
      </node>
      <node id="494">
        <label>string.h</label>
      </node>
      <node id="516">
        <label>gsl_sd.h</label>
        <link refid="gsl__sd_8h"/>
      </node>
      <node id="498">
        <label>gsl/gsl_multimin.h</label>
      </node>
      <node id="493">
        <label>time.h</label>
      </node>
      <node id="515">
        <label>gsl_min.h</label>
        <link refid="gsl__min_8h"/>
      </node>
      <node id="509">
        <label>equations.h</label>
        <link refid="equations_8h"/>
      </node>
      <node id="514">
        <label>gsl_mod.h</label>
        <link refid="gsl__mod_8h"/>
      </node>
      <node id="496">
        <label>getopt.h</label>
      </node>
      <node id="506">
        <label>libxml/xpath.h</label>
      </node>
      <node id="510">
        <label>simulation.h</label>
        <link refid="simulation_8h"/>
      </node>
      <node id="507">
        <label>mpi.h</label>
      </node>
      <node id="499">
        <label>gsl/gsl_math.h</label>
      </node>
      <node id="500">
        <label>gsl/gsl_rng.h</label>
      </node>
      <node id="512">
        <label>data_parameters.h</label>
        <link refid="data__parameters_8h"/>
      </node>
      <node id="491">
        <label>stdio.h</label>
      </node>
      <node id="511">
        <label>xml_parameter.h</label>
        <link refid="xml__parameter_8h"/>
      </node>
      <node id="513">
        <label>gsl_recuit.h</label>
        <link refid="gsl__recuit_8h"/>
      </node>
    </incdepgraph>
    <innerclass refid="structListArguments" prot="public">ListArguments</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="MetaBoFlux_8c_1a369266c24eacffb87046522897a570d5" prot="public" static="no">
        <name>_GNU_SOURCE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" line="26" bodyfile="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="MetaBoFlux_8c_1afc29359455c5e89b0a70199cab202c29" prot="public" static="no">
        <type>struct <ref refid="structListArguments" kindref="compound">ListArguments</ref></type>
        <definition>typedef struct ListArguments ListArguments</definition>
        <argsstring></argsstring>
        <name>ListArguments</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" line="72"/>
      </memberdef>
      <memberdef kind="typedef" id="MetaBoFlux_8c_1a56fef90f078ae5662624588377f1ef98" prot="public" static="no">
        <type>struct <ref refid="structListArguments" kindref="compound">ListArguments</ref> *</type>
        <definition>typedef struct ListArguments * pListArguments</definition>
        <argsstring></argsstring>
        <name>pListArguments</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" line="72"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="MetaBoFlux_8c_1a90f9d929b7ec00e9c83754b05d1122ed" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structoption" kindref="compound">option</ref></type>
        <definition>struct option long_options[15]</definition>
        <argsstring>[15]</argsstring>
        <name>long_options</name>
        <initializer>
    {
        
        {&quot;simulated_annealing&quot;,     no_argument,       0, &apos;s&apos;}, 
        {&quot;minimization&quot;,  no_argument,       0, &apos;m&apos;}, 
        {&quot;modelling&quot;,  no_argument, 0, &apos;e&apos;}, 
        {&quot;standard_deviation&quot;,  no_argument, 0, &apos;t&apos;}, 
        {&quot;group&quot;,  no_argument, 0, &apos;u&apos;}, 
        {&quot;debug&quot;,  no_argument, 0, &apos;d&apos;}, 
        {&quot;sbml&quot;,    required_argument, 0, &apos;l&apos;}, 
        {&quot;par&quot;,    required_argument, 0, &apos;r&apos;}, 
        {&quot;log&quot;,    required_argument, 0, &apos;i&apos;}, 
        {&quot;out_file&quot;,    required_argument, 0, &apos;g&apos;}, 
        {&quot;out&quot;,    required_argument, 0, &apos;o&apos;}, 
        {&quot;ratio_file&quot;,  required_argument, 0, &apos;<ref refid="gsl__min_8c_1a30c0e0cd742ae3ee221dc0c83a2a0752" kindref="member">a</ref>&apos;}, 
        {&quot;port&quot;,    required_argument, 0, &apos;p&apos;},  
        {&quot;help&quot;,    no_argument, 0, &apos;h&apos;},  
        {0, 0, 0, 0}  
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" line="96" bodyfile="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="MetaBoFlux_8c_1a3f4b8fabba96f804bce4d2788e5f358c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structListArguments" kindref="compound">pListArguments</ref></type>
        <definition>pListArguments alloc_arguments</definition>
        <argsstring>(void)</argsstring>
        <name>alloc_arguments</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Alloc memory for the struct pListArguments. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Amine Ghozlane </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" line="104" bodyfile="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" bodystart="103" bodyend="123"/>
        <references refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" compoundref="MetaBoFlux_8c" startline="67">ListArguments::activity</references>
        <references refid="structListArguments_1a227eea65bc99120840063486d602fcbb" compoundref="MetaBoFlux_8c" startline="68">ListArguments::debug</references>
        <references refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" compoundref="MetaBoFlux_8c" startline="71">ListArguments::files_path</references>
        <references refid="structListArguments_1a6e6b46a5655953f6a68b5cd31da094fd" compoundref="MetaBoFlux_8c" startline="70">ListArguments::group</references>
        <references refid="structListArguments_1ae2ccfbcd131374f1eab65ddc65da7468" compoundref="MetaBoFlux_8c" startline="69">ListArguments::port</references>
        <referencedby refid="MetaBoFlux_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="MetaBoFlux_8c" startline="399" endline="425">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="MetaBoFlux_8c_1aa7eafd280790b4a437b60ac15c2a6ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_arguments</definition>
        <argsstring>(pListArguments args)</argsstring>
        <name>free_arguments</name>
        <param>
          <type><ref refid="structListArguments" kindref="compound">pListArguments</ref></type>
          <declname>args</declname>
          <defname>arguments</defname>
        </param>
        <briefdescription>
<para>Free the struct pListArguments. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Amine Ghozlane </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arguments</parametername>
</parameternamelist>
<parameterdescription>
<para>struct pListArguments </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" line="132" bodyfile="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" bodystart="131" bodyend="135"/>
        <references refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" compoundref="MetaBoFlux_8c" startline="71">ListArguments::files_path</references>
        <referencedby refid="MetaBoFlux_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="MetaBoFlux_8c" startline="399" endline="425">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="MetaBoFlux_8c_1a6bb3d12e18c46b2a13a7194002e8fb09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void help_print</definition>
        <argsstring>(void)</argsstring>
        <name>help_print</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Print the usage help. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Amine Ghozlane </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" line="143" bodyfile="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" bodystart="142" bodyend="162"/>
        <references refid="gsl__min_8c_1a30c0e0cd742ae3ee221dc0c83a2a0752" compoundref="gsl__min_8c" startline="52">a</references>
        <referencedby refid="MetaBoFlux_8c_1a9eaf6bb32d2021f08472ac42d4309342" compoundref="MetaBoFlux_8c" startline="185" endline="324">argument_analysis</referencedby>
        <referencedby refid="MetaBoFlux_8c_1ad123ef44ec4ef912b084c8b5715b9369" compoundref="MetaBoFlux_8c" startline="361" endline="389">check_arguments</referencedby>
        <referencedby refid="MetaBoFlux_8c_1af8792bea8df799a759aad90b0b776db5" compoundref="MetaBoFlux_8c" startline="332" endline="353">check_common</referencedby>
        <referencedby refid="MetaBoFlux_8c_1af5bf4eba3c08aec77213c81dd1f60d31" compoundref="MetaBoFlux_8c" startline="170" endline="175">error_activity</referencedby>
      </memberdef>
      <memberdef kind="function" id="MetaBoFlux_8c_1af5bf4eba3c08aec77213c81dd1f60d31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void error_activity</definition>
        <argsstring>(int activity)</argsstring>
        <name>error_activity</name>
        <param>
          <type>int</type>
          <declname>activity</declname>
        </param>
        <briefdescription>
<para>Print the error notification. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Amine Ghozlane </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>activity</parametername>
</parameternamelist>
<parameterdescription>
<para>Activity chosen </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" line="171" bodyfile="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" bodystart="170" bodyend="175"/>
        <references refid="MetaBoFlux_8c_1a6bb3d12e18c46b2a13a7194002e8fb09" compoundref="MetaBoFlux_8c" startline="142" endline="162">help_print</references>
        <referencedby refid="MetaBoFlux_8c_1a9eaf6bb32d2021f08472ac42d4309342" compoundref="MetaBoFlux_8c" startline="185" endline="324">argument_analysis</referencedby>
      </memberdef>
      <memberdef kind="function" id="MetaBoFlux_8c_1a9eaf6bb32d2021f08472ac42d4309342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void argument_analysis</definition>
        <argsstring>(int argc, char **argv, pListArguments args)</argsstring>
        <name>argument_analysis</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type><ref refid="structListArguments" kindref="compound">pListArguments</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Print the error notification. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Amine Ghozlane </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of arguments </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>List of arguments </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>struct <ref refid="structListArguments" kindref="compound">ListArguments</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" line="186" bodyfile="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" bodystart="185" bodyend="324"/>
        <references refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" compoundref="MetaBoFlux_8c" startline="67">ListArguments::activity</references>
        <references refid="structListArguments_1a227eea65bc99120840063486d602fcbb" compoundref="MetaBoFlux_8c" startline="68">ListArguments::debug</references>
        <references refid="MetaBoFlux_8c_1af5bf4eba3c08aec77213c81dd1f60d31" compoundref="MetaBoFlux_8c" startline="170" endline="175">error_activity</references>
        <references refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" compoundref="MetaBoFlux_8c" startline="71">ListArguments::files_path</references>
        <references refid="structListArguments_1a6e6b46a5655953f6a68b5cd31da094fd" compoundref="MetaBoFlux_8c" startline="70">ListArguments::group</references>
        <references refid="MetaBoFlux_8c_1a6bb3d12e18c46b2a13a7194002e8fb09" compoundref="MetaBoFlux_8c" startline="142" endline="162">help_print</references>
        <references refid="structListArguments_1ae2ccfbcd131374f1eab65ddc65da7468" compoundref="MetaBoFlux_8c" startline="69">ListArguments::port</references>
        <referencedby refid="MetaBoFlux_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="MetaBoFlux_8c" startline="399" endline="425">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="MetaBoFlux_8c_1af8792bea8df799a759aad90b0b776db5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void check_common</definition>
        <argsstring>(pListArguments args)</argsstring>
        <name>check_common</name>
        <param>
          <type><ref refid="structListArguments" kindref="compound">pListArguments</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Check obligatory arguments. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Amine Ghozlane </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>struct <ref refid="structListArguments" kindref="compound">ListArguments</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" line="333" bodyfile="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" bodystart="332" bodyend="353"/>
        <references refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" compoundref="MetaBoFlux_8c" startline="71">ListArguments::files_path</references>
        <references refid="MetaBoFlux_8c_1a6bb3d12e18c46b2a13a7194002e8fb09" compoundref="MetaBoFlux_8c" startline="142" endline="162">help_print</references>
        <referencedby refid="MetaBoFlux_8c_1ad123ef44ec4ef912b084c8b5715b9369" compoundref="MetaBoFlux_8c" startline="361" endline="389">check_arguments</referencedby>
      </memberdef>
      <memberdef kind="function" id="MetaBoFlux_8c_1ad123ef44ec4ef912b084c8b5715b9369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void check_arguments</definition>
        <argsstring>(pListArguments args)</argsstring>
        <name>check_arguments</name>
        <param>
          <type><ref refid="structListArguments" kindref="compound">pListArguments</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Check program arguments. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Amine Ghozlane </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>struct <ref refid="structListArguments" kindref="compound">ListArguments</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" line="362" bodyfile="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" bodystart="361" bodyend="389"/>
        <references refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" compoundref="MetaBoFlux_8c" startline="67">ListArguments::activity</references>
        <references refid="MetaBoFlux_8c_1af8792bea8df799a759aad90b0b776db5" compoundref="MetaBoFlux_8c" startline="332" endline="353">check_common</references>
        <references refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" compoundref="MetaBoFlux_8c" startline="71">ListArguments::files_path</references>
        <references refid="MetaBoFlux_8c_1a6bb3d12e18c46b2a13a7194002e8fb09" compoundref="MetaBoFlux_8c" startline="142" endline="162">help_print</references>
        <referencedby refid="MetaBoFlux_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="MetaBoFlux_8c" startline="399" endline="425">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="MetaBoFlux_8c_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Enter in the program for simulated annealing. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Amine Ghozlane </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of arguments </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>List of arguments </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>EXIT_SUCCESS Normal stop of the program </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" line="400" bodyfile="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c" bodystart="399" bodyend="425"/>
        <references refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" compoundref="MetaBoFlux_8c" startline="67">ListArguments::activity</references>
        <references refid="MetaBoFlux_8c_1a3f4b8fabba96f804bce4d2788e5f358c" compoundref="MetaBoFlux_8c" startline="103" endline="123">alloc_arguments</references>
        <references refid="MetaBoFlux_8c_1a9eaf6bb32d2021f08472ac42d4309342" compoundref="MetaBoFlux_8c" startline="185" endline="324">argument_analysis</references>
        <references refid="MetaBoFlux_8c_1ad123ef44ec4ef912b084c8b5715b9369" compoundref="MetaBoFlux_8c" startline="361" endline="389">check_arguments</references>
        <references refid="mpi__load_8c_1ab21a58c6a683b07418fdb9847021e973" compoundref="mpi__load_8c" startline="546" endline="579">compute_mpi</references>
        <references refid="structListArguments_1a227eea65bc99120840063486d602fcbb" compoundref="MetaBoFlux_8c" startline="68">ListArguments::debug</references>
        <references refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" compoundref="MetaBoFlux_8c" startline="71">ListArguments::files_path</references>
        <references refid="MetaBoFlux_8c_1aa7eafd280790b4a437b60ac15c2a6ec6" compoundref="MetaBoFlux_8c" startline="131" endline="135">free_arguments</references>
        <references refid="structListArguments_1a6e6b46a5655953f6a68b5cd31da094fd" compoundref="MetaBoFlux_8c" startline="70">ListArguments::group</references>
        <references refid="structListArguments_1ae2ccfbcd131374f1eab65ddc65da7468" compoundref="MetaBoFlux_8c" startline="69">ListArguments::port</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Program for simulated annealing analysis. </para>    </briefdescription>
    <detaileddescription>
<para>This file is part of MetaBoFlux (<ulink url="http://www.cbib.u-bordeaux2.fr/metaboflux/">http://www.cbib.u-bordeaux2.fr/metaboflux/</ulink>) Copyright (C) 2010 Amine Ghozlane from LaBRI and University of Bordeaux 1</para><para>MetaBoFlux is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</para><para>MetaBoFlux is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this program. If not, see &lt;<ulink url="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</ulink>&gt;.</para><para><simplesect kind="author"><para>{Amine Ghozlane} </para></simplesect>
<simplesect kind="version"><para>3.0 </para></simplesect>
<simplesect kind="date"><para>9 novembre 2009 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="26" refid="MetaBoFlux_8c_1a369266c24eacffb87046522897a570d5" refkind="member"><highlight class="preprocessor">#define<sp/>_GNU_SOURCE</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;getopt.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gsl/gsl_blas.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gsl/gsl_multimin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gsl/gsl_math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gsl/gsl_rng.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gsl/gsl_siman.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gsl/gsl_ieee_utils.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gsl/gsl_statistics_double.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sbml/SBMLTypes.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libxml/parser.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libxml/xpath.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mpi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="especes_8h" kindref="compound" tooltip="Modelize a molecule.">especes.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="equations_8h" kindref="compound" tooltip="Processes an equation in MathML format.">equations.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="simulation_8h" kindref="compound" tooltip="Simulate a petri net.">simulation.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="xml__parameter_8h" kindref="compound" tooltip="Xml reader for parametre.xml.">xml_parameter.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="data__parameters_8h" kindref="compound" tooltip="Load data parameters.">data_parameters.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gsl__recuit_8h" kindref="compound" tooltip="Compute the simulated annealing.">gsl_recuit.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gsl__mod_8h" kindref="compound" tooltip="Compute the modeling of scenarii.">gsl_mod.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gsl__min_8h" kindref="compound" tooltip="Compute minimization of scenarii.">gsl_min.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gsl__sd_8h" kindref="compound" tooltip="Compute the standard deviation analysis of the simulations.">gsl_sd.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mpi__load_8h" kindref="compound" tooltip="Parallelize the program.">mpi_load.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*#include<sp/>&lt;mcheck.h&gt;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/***********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Programme<sp/>principal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/***********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Liste<sp/>des<sp/>arguments<sp/>*/</highlight></codeline>
<codeline lineno="65" refid="structListArguments" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structListArguments" kindref="compound" tooltip="List of arguments.">ListArguments</ref></highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67" refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" kindref="member">activity</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="68" refid="structListArguments_1a227eea65bc99120840063486d602fcbb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structListArguments_1a227eea65bc99120840063486d602fcbb" kindref="member">debug</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69" refid="structListArguments_1ae2ccfbcd131374f1eab65ddc65da7468" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structListArguments_1ae2ccfbcd131374f1eab65ddc65da7468" kindref="member">port</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="70" refid="structListArguments_1a6e6b46a5655953f6a68b5cd31da094fd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structListArguments_1a6e6b46a5655953f6a68b5cd31da094fd" kindref="member">group</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71" refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal">}<ref refid="MetaBoFlux_8c_1afc29359455c5e89b0a70199cab202c29" kindref="member">ListArguments</ref>,<sp/>*<ref refid="MetaBoFlux_8c_1a56fef90f078ae5662624588377f1ef98" kindref="member">pListArguments</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="MetaBoFlux_8c_1a90f9d929b7ec00e9c83754b05d1122ed" refkind="member"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structoption" kindref="compound" tooltip="List of flag for getopt.">option</ref><sp/><ref refid="MetaBoFlux_8c_1a90f9d929b7ec00e9c83754b05d1122ed" kindref="member">long_options</ref>[15]<sp/>=</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>These<sp/>options<sp/>don&apos;t<sp/>set<sp/>a<sp/>flag.<sp/>We<sp/>distinguish<sp/>them<sp/>by<sp/>their<sp/>indices.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;simulated_annealing&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/>no_argument,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">},<sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;minimization&quot;</highlight><highlight class="normal">,<sp/><sp/>no_argument,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="charliteral">&apos;m&apos;</highlight><highlight class="normal">},<sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;modelling&quot;</highlight><highlight class="normal">,<sp/><sp/>no_argument,<sp/>0,<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">},<sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;standard_deviation&quot;</highlight><highlight class="normal">,<sp/><sp/>no_argument,<sp/>0,<sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">},<sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;group&quot;</highlight><highlight class="normal">,<sp/><sp/>no_argument,<sp/>0,<sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">},<sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;debug&quot;</highlight><highlight class="normal">,<sp/><sp/>no_argument,<sp/>0,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">},<sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;sbml&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>required_argument,<sp/>0,<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">},<sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;par&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>required_argument,<sp/>0,<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">},<sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;log&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>required_argument,<sp/>0,<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">},<sp/></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;out_file&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>required_argument,<sp/>0,<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">},<sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;out&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>required_argument,<sp/>0,<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">},<sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;ratio_file&quot;</highlight><highlight class="normal">,<sp/><sp/>required_argument,<sp/>0,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">},<sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;port&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>required_argument,<sp/>0,<sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">},<sp/><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;help&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>no_argument,<sp/>0,<sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">},<sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,<sp/>0,<sp/>0,<sp/>0}<sp/><sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="MetaBoFlux_8c_1a3f4b8fabba96f804bce4d2788e5f358c" refkind="member"><highlight class="normal">pListArguments<sp/><ref refid="MetaBoFlux_8c_1a3f4b8fabba96f804bce4d2788e5f358c" kindref="member" tooltip="Alloc memory for the struct pListArguments.">alloc_arguments</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>pListArguments<sp/>args=NULL;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>nb_files=6;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>args=(<ref refid="MetaBoFlux_8c_1a56fef90f078ae5662624588377f1ef98" kindref="member">pListArguments</ref>)malloc(1*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structListArguments" kindref="compound" tooltip="List of arguments.">ListArguments</ref>));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>assert(args!=NULL);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>=NULL;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)malloc(nb_files*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>assert(args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>!=NULL);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialisation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;nb_files;i++){</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[i]=NULL;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>args-&gt;<ref refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" kindref="member">activity</ref>=0;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>args-&gt;<ref refid="structListArguments_1a227eea65bc99120840063486d602fcbb" kindref="member">debug</ref>=0;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>args-&gt;<ref refid="structListArguments_1ae2ccfbcd131374f1eab65ddc65da7468" kindref="member">port</ref>=0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>args-&gt;<ref refid="structListArguments_1a6e6b46a5655953f6a68b5cd31da094fd" kindref="member">group</ref>=0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*args-&gt;row=0;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>args;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="MetaBoFlux_8c_1aa7eafd280790b4a437b60ac15c2a6ec6" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="MetaBoFlux_8c_1aa7eafd280790b4a437b60ac15c2a6ec6" kindref="member" tooltip="Free the struct pListArguments.">free_arguments</ref>(pListArguments<sp/>args)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>!=NULL)<sp/>free(args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(args!=NULL)<sp/>free(args);</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="MetaBoFlux_8c_1a6bb3d12e18c46b2a13a7194002e8fb09" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="MetaBoFlux_8c_1a6bb3d12e18c46b2a13a7194002e8fb09" kindref="member" tooltip="Print the usage help.">help_print</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<ref refid="gsl__min_8c_1a30c0e0cd742ae3ee221dc0c83a2a0752" kindref="member">a</ref>=0;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>a=printf(</highlight><highlight class="stringliteral">&quot;Option\t\tCase\t\tFilename\tType\tDescription\a\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;(a+40);i++)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;-s\t\tno\t\tno\t\tno\tSimulated_annealing\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;-m\t\tno\t\tno\t\tno\tMinimization\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;-e\t\tno\t\tno\t\tno\tModelling\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;-t\t\tno\t\tno\t\tno\tStandard_deviation\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;-p\t\t-s<sp/>-m<sp/>-e<sp/>-t\tno\t\tno\tPort\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;--group\t\t-e\t\tno\t\tno\tGroup\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;--number_group\t-e\t\tno\t\tInput\tNumber<sp/>of<sp/>the<sp/>group\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;--ratio_file\t-m<sp/>-e<sp/>-t\tno\t\tInput\tRatio<sp/>file\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;--debug\t\t-s<sp/>-m<sp/>-e<sp/>-t\tno\t\tOutput\tDebug<sp/>file<sp/>output\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;--sbml\t\t-s<sp/>-m<sp/>-e<sp/>-t\tsbml.xml\tInput\tSBML<sp/>file\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;--par\t\t-s<sp/>-m<sp/>-e<sp/>-t\tparameter.xml\tInput\tParameter<sp/>file\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;--log\t\t-s<sp/>-m<sp/>-e<sp/>-t\tparameter.xml\tInput\tLog<sp/>file\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;--out\t\t-s<sp/>-m<sp/>-e<sp/>-t\trepertory/\tOutput\tResult<sp/>repertory\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="MetaBoFlux_8c_1af5bf4eba3c08aec77213c81dd1f60d31" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="MetaBoFlux_8c_1af5bf4eba3c08aec77213c81dd1f60d31" kindref="member" tooltip="Print the error notification.">error_activity</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>activity)</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(activity!=0)<sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error<sp/>:<sp/>activity<sp/>[%d]<sp/>has<sp/>already<sp/>been<sp/>chosen,<sp/>you<sp/>can<sp/>only<sp/>do<sp/>one<sp/>activity<sp/>at<sp/>a<sp/>time\n&quot;</highlight><highlight class="normal">,activity);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="MetaBoFlux_8c_1a6bb3d12e18c46b2a13a7194002e8fb09" kindref="member" tooltip="Print the usage help.">help_print</ref>();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="MetaBoFlux_8c_1a9eaf6bb32d2021f08472ac42d4309342" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="MetaBoFlux_8c_1a9eaf6bb32d2021f08472ac42d4309342" kindref="member" tooltip="Print the error notification.">argument_analysis</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv,<sp/>pListArguments<sp/>args)</highlight></codeline>
<codeline lineno="186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c=0,<sp/>option_index=0;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1){</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>getopt_long<sp/>stores<sp/>the<sp/>option<sp/>index<sp/>here.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>option_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*c<sp/>=<sp/>getopt_long<sp/>(argc,<sp/>argv,<sp/>&quot;smgtl:r:o:dp:h&quot;,long_options,<sp/>&amp;option_index);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>getopt_long<sp/>(argc,<sp/>argv,<sp/></highlight><highlight class="stringliteral">&quot;smetudl:r:g:o:n:a:i:g:p:h&quot;</highlight><highlight class="normal">,long_options,<sp/>&amp;option_index);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Detect<sp/>the<sp/>end<sp/>of<sp/>the<sp/>options.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*TODO<sp/>A<sp/>virer*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>this<sp/>option<sp/>set<sp/>a<sp/>flag,<sp/>do<sp/>nothing<sp/>else<sp/>now.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(long_options[option_index].flag<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(</highlight><highlight class="stringliteral">&quot;option<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>long_options[option_index].name);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optarg)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>with<sp/>arg<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>optarg);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Choix<sp/>du<sp/>recuit<sp/>simule<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(args-&gt;<ref refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" kindref="member">activity</ref>==0){</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Metaboflux<sp/>chosen<sp/>activity<sp/>:<sp/>[1]<sp/>Simulated<sp/>annealing\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;<ref refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" kindref="member">activity</ref>=1;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="MetaBoFlux_8c_1af5bf4eba3c08aec77213c81dd1f60d31" kindref="member" tooltip="Print the error notification.">error_activity</ref>(args-&gt;<ref refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" kindref="member">activity</ref>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Choix<sp/>de<sp/>la<sp/>minimisation*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;m&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!args-&gt;<ref refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" kindref="member">activity</ref>){</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Metaboflux<sp/>chosen<sp/>activity<sp/>:<sp/>[2]<sp/>Minimization\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;<ref refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" kindref="member">activity</ref>=2;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="MetaBoFlux_8c_1af5bf4eba3c08aec77213c81dd1f60d31" kindref="member" tooltip="Print the error notification.">error_activity</ref>(args-&gt;<ref refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" kindref="member">activity</ref>);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Choix<sp/>du<sp/>modeling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!args-&gt;<ref refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" kindref="member">activity</ref>){</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Metaboflux<sp/>chosen<sp/>activity<sp/>:<sp/>[3]<sp/>Modeling\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;<ref refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" kindref="member">activity</ref>=3;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="MetaBoFlux_8c_1af5bf4eba3c08aec77213c81dd1f60d31" kindref="member" tooltip="Print the error notification.">error_activity</ref>(args-&gt;<ref refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" kindref="member">activity</ref>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Choix<sp/>de<sp/>la<sp/>standard<sp/>deviation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!args-&gt;<ref refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" kindref="member">activity</ref>){</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Metaboflux<sp/>chosen<sp/>activity<sp/>:<sp/>[4]<sp/>Standard<sp/>deviation\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;<ref refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" kindref="member">activity</ref>=4;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="MetaBoFlux_8c_1af5bf4eba3c08aec77213c81dd1f60d31" kindref="member" tooltip="Print the error notification.">error_activity</ref>(args-&gt;<ref refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" kindref="member">activity</ref>);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Debug<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;<ref refid="structListArguments_1a227eea65bc99120840063486d602fcbb" kindref="member">debug</ref>=1;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PATH<sp/>du<sp/>fichier<sp/>SBML<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[0]=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)strlen(optarg)+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(char));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[0]!=NULL);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[0],<sp/>optarg);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PATH<sp/>du<sp/>fichier<sp/>Parameter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[1]=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)strlen(optarg)+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(char));</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[1]!=NULL);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[1],<sp/>optarg);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PATH<sp/>du<sp/>repertory<sp/>out<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[2]=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)strlen(optarg)+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(char));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[2]!=NULL);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[2],<sp/>optarg);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PATH<sp/>du<sp/>fichier<sp/>ratio<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[3]=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)strlen(optarg)+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(char));</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[3]!=NULL);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[3],<sp/>optarg);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PATH<sp/>du<sp/>fichier<sp/>out_file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[4]=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)strlen(optarg)+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(char));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[4]!=NULL);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[4],<sp/>optarg);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PATH<sp/>du<sp/>fichier<sp/>Log<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[5]=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)strlen(optarg)+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(char));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[5]!=NULL);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[5],<sp/>optarg);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Port<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;<ref refid="structListArguments_1ae2ccfbcd131374f1eab65ddc65da7468" kindref="member">port</ref>=atoi(optarg);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Group<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;<ref refid="structListArguments_1a6e6b46a5655953f6a68b5cd31da094fd" kindref="member">group</ref>=1;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Help<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MetaBoFlux_8c_1a6bb3d12e18c46b2a13a7194002e8fb09" kindref="member" tooltip="Print the usage help.">help_print</ref>();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>getopt_long<sp/>already<sp/>printed<sp/>an<sp/>error<sp/>message.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abort<sp/>();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Print<sp/>any<sp/>remaining<sp/>command<sp/>line<sp/>arguments<sp/>(not<sp/>options).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optind<sp/>&lt;<sp/>argc)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(</highlight><highlight class="stringliteral">&quot;non-option<sp/>ARGV-elements:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(optind<sp/>&lt;<sp/>argc)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(</highlight><highlight class="stringliteral">&quot;%s<sp/>&quot;</highlight><highlight class="normal">,<sp/>argv[optind++]);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>putchar<sp/>(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="MetaBoFlux_8c_1af8792bea8df799a759aad90b0b776db5" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="MetaBoFlux_8c_1af8792bea8df799a759aad90b0b776db5" kindref="member" tooltip="Check obligatory arguments.">check_common</ref>(pListArguments<sp/>args)</highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pas<sp/>de<sp/>SBML<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[0]==NULL){</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;SBML<sp/>file<sp/>is<sp/>missing\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MetaBoFlux_8c_1a6bb3d12e18c46b2a13a7194002e8fb09" kindref="member" tooltip="Print the usage help.">help_print</ref>();</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pas<sp/>de<sp/>par<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[1]==NULL){</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Parameter<sp/>file<sp/>is<sp/>missing\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MetaBoFlux_8c_1a6bb3d12e18c46b2a13a7194002e8fb09" kindref="member" tooltip="Print the usage help.">help_print</ref>();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pas<sp/>de<sp/>repertoire<sp/>de<sp/>sortie<sp/>des<sp/>resultats<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[2]==NULL){</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Out<sp/>repertory<sp/>is<sp/>missing\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MetaBoFlux_8c_1a6bb3d12e18c46b2a13a7194002e8fb09" kindref="member" tooltip="Print the usage help.">help_print</ref>();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="MetaBoFlux_8c_1ad123ef44ec4ef912b084c8b5715b9369" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="MetaBoFlux_8c_1ad123ef44ec4ef912b084c8b5715b9369" kindref="member" tooltip="Check program arguments.">check_arguments</ref>(pListArguments<sp/>args)</highlight></codeline>
<codeline lineno="362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Verifie<sp/>les<sp/>arguments<sp/>obligatoires<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><ref refid="MetaBoFlux_8c_1af8792bea8df799a759aad90b0b776db5" kindref="member" tooltip="Check obligatory arguments.">check_common</ref>(args);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Verifications<sp/>des<sp/>paths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(args-&gt;<ref refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" kindref="member">activity</ref>==2||args-&gt;<ref refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" kindref="member">activity</ref>==3||args-&gt;<ref refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" kindref="member">activity</ref>==4){</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pas<sp/>de<sp/>fichier<sp/>ratio<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[3]==NULL){</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;ratio_file<sp/>is<sp/>missing\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MetaBoFlux_8c_1a6bb3d12e18c46b2a13a7194002e8fb09" kindref="member" tooltip="Print the usage help.">help_print</ref>();</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pas<sp/>de<sp/>out<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[4]==NULL){</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;out_file<sp/>is<sp/>missing\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MetaBoFlux_8c_1a6bb3d12e18c46b2a13a7194002e8fb09" kindref="member" tooltip="Print the usage help.">help_print</ref>();</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Verification<sp/>du<sp/>path<sp/>log<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(args-&gt;<ref refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" kindref="member">activity</ref>==2||args-&gt;<ref refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" kindref="member">activity</ref>==3){</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pas<sp/>de<sp/>out<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>[5]==NULL){</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;log<sp/>file<sp/>is<sp/>missing\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MetaBoFlux_8c_1a6bb3d12e18c46b2a13a7194002e8fb09" kindref="member" tooltip="Print the usage help.">help_print</ref>();</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="MetaBoFlux_8c_1a3c04138a5bfe5d72780bb7e82a18e627" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="MetaBoFlux_8c_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member" tooltip="Enter in the program for simulated annealing.">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="400"><highlight class="normal">{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*mtrace();*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>File<sp/>adress<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>pListArguments<sp/>args=NULL;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(argc==1){</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Do<sp/>&apos;./MetaBoFlux.exe<sp/>-h&apos;<sp/>for<sp/>a<sp/>usage<sp/>summary\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocation<sp/>memoire<sp/>de<sp/>la<sp/>structure<sp/>contenant<sp/>les<sp/>informations<sp/>des<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>args=<ref refid="MetaBoFlux_8c_1a3f4b8fabba96f804bce4d2788e5f358c" kindref="member" tooltip="Alloc memory for the struct pListArguments.">alloc_arguments</ref>();</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Analyse<sp/>des<sp/>arguments<sp/>fournis<sp/>avec<sp/>getopt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><ref refid="MetaBoFlux_8c_1a9eaf6bb32d2021f08472ac42d4309342" kindref="member" tooltip="Print the error notification.">argument_analysis</ref>(argc,argv,args);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Verification<sp/>des<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><ref refid="MetaBoFlux_8c_1ad123ef44ec4ef912b084c8b5715b9369" kindref="member" tooltip="Check program arguments.">check_arguments</ref>(args);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Realise<sp/>les<sp/>simulations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><ref refid="mpi__load_8c_1ab21a58c6a683b07418fdb9847021e973" kindref="member" tooltip="Compute the simulated annealing through mpi.">compute_mpi</ref>(argc,argv,args-&gt;<ref refid="structListArguments_1a06c7f7a5dee18ad6974749e892e01178" kindref="member">files_path</ref>,args-&gt;<ref refid="structListArguments_1ab970afa2b3e887fdacd7cce2b24f571c" kindref="member">activity</ref>,args-&gt;<ref refid="structListArguments_1a6e6b46a5655953f6a68b5cd31da094fd" kindref="member">group</ref>,<sp/>args-&gt;<ref refid="structListArguments_1a227eea65bc99120840063486d602fcbb" kindref="member">debug</ref>,args-&gt;<ref refid="structListArguments_1ae2ccfbcd131374f1eab65ddc65da7468" kindref="member">port</ref>);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Liberation<sp/>de<sp/>la<sp/>memoire<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><ref refid="MetaBoFlux_8c_1aa7eafd280790b4a437b60ac15c2a6ec6" kindref="member" tooltip="Free the struct pListArguments.">free_arguments</ref>(args);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/amine/workspace/MetaboFlux/metaboflux/src/MetaBoFlux.c"/>
  </compounddef>
</doxygen>
